@using MorseSharp;
@using AraratMorse.Stores;
@using AraratMorse.Stores.LightStore;
@using AraratMorse.Stores.TranslationState;
@using AraratMorse.Stores.ConversionState;
@using AraratMorse.Stores.LanguageState;
@using AraratMorse.Stores.SettingStore;

@inherits Fluxor.Blazor.Web.Components.FluxorComponent



@* Overlay *@
<div @onclick="CloseSection" class="@(lightState!.Value.IsLightSectionOpened ? "fixed" : "hidden") inset-0 bg-black z-20 opacity-10"></div>

<div class="fixed bottom-0 left-0 flex flex-col justify-between bg-black text-white items-center w-full h-full rounded-t-lg p-5 mt-10 z-50 transition-transform shadow-top @(!IsOpened ? "translate-y-full" : "translate-y-0")">
    <button @onclick="CloseSection" class="text-white text-start self-start rounded-full p-2">
        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24"><path fill="currentColor" d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10s10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17L12 13.41L8.41 17L7 15.59L10.59 12L7 8.41L8.41 7L12 10.59L15.59 7L17 8.41L13.41 12L17 15.59z" /></svg>
    </button>
    @if (errorOccurred)
    {
        <p class=" absolute top-16 text-white text-xl">Could not generate the light.</p>
    }
    else
    {
        <div class="w-full h-full @(isBlinking ?"bg-white" : "bg-black") rounded-lg relative z-0">
        </div>

        @* Toolbar *@
        <div class="absolute flex gap-2 left-0 right-0 mx-auto w-24 top-16 bg-black px-3 py-2 rounded-3xl z-10">
            <button @onclick=@(async () => await Play()) disabled="@isPlaying" class="@(isPlaying ? "text-gray-300" : "text-green-400")">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" d="M6.235 2.192A1.5 1.5 0 0 0 4 3.499v9a1.5 1.5 0 0 0 2.235 1.308l8-4.5a1.5 1.5 0 0 0 0-2.615l-8-4.5Z" /></svg>
            </button>
            <button @onclick=Pause disabled="@(!isPlaying)" class="@(isPlaying ? "text-gray-300" : "text-gray-500")">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" d="M3.75 2A1.75 1.75 0 0 0 2 3.75v8.5c0 .966.784 1.75 1.75 1.75h1.5A1.75 1.75 0 0 0 7 12.25v-8.5A1.75 1.75 0 0 0 5.25 2h-1.5Zm7 0A1.75 1.75 0 0 0 9 3.75v8.5c0 .966.784 1.75 1.75 1.75h1.5A1.75 1.75 0 0 0 14 12.25v-8.5A1.75 1.75 0 0 0 12.25 2h-1.5Z" /></svg>
            </button>
            <button @onclick=Stop disabled="@(!isPlaying)" class="@(isPlaying ? "text-rose-700" : "text-rose-300")">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" d="M1 8a7 7 0 1 1 14 0A7 7 0 0 1 1 8Zm5-3a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H6Z" /></svg>
            </button>
        </div>
    }

</div>

@code {

    #region States
    [Inject]
    IState<LightState>? lightState { get; set; }

    [Inject]
    IState<TranslationState>? translationState { get; set; }

    [Inject]
    IState<ConversionState>? conversionState { get; set; }

    [Inject]
    IState<LanguageState>? languageState { get; set; }

    [Inject]
    IState<SettingState>? settingState { get; set; }

    [Inject]
    IDispatcher? dispatcher { get; set; }

    #endregion

    #region Parameter

    [Parameter]
    public bool IsOpened { get; set; }

    #endregion

    #region Properties

    private bool isBlinking { get; set; }
    private bool isPlaying { get; set; }
    private bool canPause { get; set; }
    private bool canStop { get; set; }
    private string? theMorse { get; set; }
    private int offset { get; set; }
    bool errorOccurred { get; set; }

    private CancellationTokenSource? cancellationTokenSource;


    #endregion

    #region Methods
    protected override void OnParametersSet() =>
        GetMorse();

    /// <summary>
    /// Gets the morse
    /// </summary>
    void GetMorse()
    {
        if (conversionState!.Value.IsEncoding)
            theMorse = translationState!.Value.Output;
        else
            theMorse = translationState!.Value.Input;

        offset = 0;

    }
    async ValueTask Play()
    {
        try
        {
            //init CancellationTokenSource to manage the light.
            cancellationTokenSource = new CancellationTokenSource();
            await Task.Run(async () =>
            {
                isPlaying = true;
                canPause = true;
                canStop = true;

                await Morse.GetConverter()
               .ForLanguage(languageState!.Value.Language)
               .ToLight(theMorse!)
               .SetBlinkerOptions(settingState!.Value.CharSpeed, settingState!.Value.WordSpeed)
               .DoBlinks(async (hasToBlink) => await DoBlinksAsync(hasToBlink, cancellationTokenSource.Token));

            }, this.cancellationTokenSource.Token);

            errorOccurred = false;

        }
        catch
        {
            errorOccurred = true;
        }
        finally
        {
            /* 
            * When the blinking completes, change back the play button 
            * Get the full morse, and move the offest back to 0.
            */
            isPlaying = false;
            GetMorse();

        }


    }
    void Pause()
    {
        if (isPlaying)
        {
            /*
            * If it was playing, then substring the morse form the offset
            * to the remaining. then cancle the task.
            */ 
            theMorse = theMorse!.Substring(this.offset);
            this.cancellationTokenSource!.Cancel();
        }

        isPlaying = false;
    }

    void Stop()
    {
        if (isPlaying)
        {
            this.cancellationTokenSource!.Cancel();
            GetMorse();
        }

        isPlaying = false;

    }
    async ValueTask DoBlinksAsync(bool hasToBlink, CancellationToken cancellationToken)
    {
        if (cancellationToken.IsCancellationRequested)
            return;

        /*
        * If the Cancellation not requested, then in each iteration
         * increase the offset by one and show whitish background in the div.
         */
        ++offset;
        isBlinking = hasToBlink;
        await InvokeAsync(StateHasChanged);
    }
    void CloseSection()
    {
        //Re-init the light blinker
        this.cancellationTokenSource!.Cancel();
        ResetPlayer();
        GetMorse();

        LightSectionAction action = new() { IsOpened = false };
        dispatcher!.Dispatch(action);
    }
    void ResetPlayer()
    {
        isPlaying = false;
        canPause = false;
        canStop = false;
    }
    #endregion
}